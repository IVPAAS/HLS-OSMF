<?xml version="1.0" encoding="utf-8"?>
<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:tests="net.digitalprimates.dash.tests.*"
	applicationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import net.digitalprimates.dash.tests.manifest.CommonSuite;
			import net.digitalprimates.dash.tests.manifest.ManifestSuite;
			import net.digitalprimates.dash.tests.manifest.RepresentationSuite;
			import net.digitalprimates.dash.tests.manifest.SegmentSuite;
			
			[Bindable]
			private var manifestData:String;
			
			private var loader:URLLoader;
			
			private function doValidation():void {
				var url:String = manifestLocation.text;
				if (!url || url.length == 0) {
					Alert.show("Please enter a manifest url.", "Error");
					return;
				}
				
				results.clear();
				
				loader = new URLLoader(new URLRequest(url));
				loader.addEventListener(Event.COMPLETE, onComplete);
				loader.addEventListener(IOErrorEvent.IO_ERROR, onError);
				loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);
			}
			
			private function onComplete(event:Event):void {
				loader.removeEventListener(Event.COMPLETE, onComplete);
				loader.removeEventListener(IOErrorEvent.IO_ERROR, onError);
				loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);
				
				var manifest:XML = new XML(loader.data);
				
				loader = null;
				
				executeValidation(manifest);
			}
			
			private function onError(event:Event):void {
				loader.removeEventListener(Event.COMPLETE, onComplete);
				loader.removeEventListener(IOErrorEvent.IO_ERROR, onError);
				loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);
				loader = null;
				
				Alert.show("Error loading manifest!", "Error");
			}
			
			private function init():void {
				var url:String = ExternalInterface.call("window.location.href.toString");
				var idx:int = url.indexOf('?');
				if (idx != -1) {
					var search:String = url.substring(idx+1);
					var vars:URLVariables = new URLVariables(search);
					if (vars.hasOwnProperty("url")) {
						var stream:String = unescape(vars["url"]);
						if (stream != null && stream.length > 0) {
							manifestLocation.text = stream;
							doValidation();
						}
					}
				}
			}
			
			private function executeValidation(value:XML):void {
				manifestData = value.toString();
				
				new ManifestSuite(value).run(results);
				new RepresentationSuite(value).run(results);
				new CommonSuite(value).run(results);
				new SegmentSuite(value).run(results);
			}
			
			private function pasteContents():void {
				var popup:PasteContentsWindow = PopUpManager.createPopUp(this, PasteContentsWindow, true) as PasteContentsWindow;
				PopUpManager.centerPopUp(popup);
				popup.addEventListener(CloseEvent.CLOSE, onPasteClose);
			}
			
			private function onPasteClose(event:CloseEvent):void {
				var popup:PasteContentsWindow = event.target as PasteContentsWindow;
				PopUpManager.removePopUp(popup);
				
				if (event.detail == PasteContentsWindow.CONFIRM) {
					var str:String = popup.contents;
					if (str == null || str.length == 0) {
						Alert.show("No data entered for manifest.", "Error");
						return;
					}
					
					try {
						var manifest:XML = new XML(str);
						executeValidation(manifest);
					}
					catch (e:Error) {
						Alert.show("Invalid XML", "Error");
					}
				}
				
				
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout
			paddingTop="10" paddingBottom="10"
			paddingLeft="10" paddingRight="10"/>
	</s:layout>
	
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label text="Manifest URL:"/>
		<s:TextInput id="manifestLocation" width="300"/>
		<s:Button label="Validate" click="doValidation()"/>
		
		<s:Spacer width="10"/>
		<mx:VRule height="20"/>
		<s:Spacer width="10"/>
		
		<s:Button
			label="Paste MPD"
			click="pasteContents()"/>
		
		<s:Spacer width="10"/>
		<mx:VRule height="20"/>
		<s:Spacer width="10"/>
		
		<s:CheckBox
			id="showPasses"
			label="Show Passes"
			selected="true"/>
		
		<s:CheckBox
			id="showFailures"
			label="Show Failures"
			selected="true"/>
		
	</s:HGroup>
	
	<mx:TabNavigator width="100%" height="100%">
		
		<s:NavigatorContent label="Results">
			<tests:ListResponder
				id="results"
				width="100%" height="100%"
				showPass="{showPasses.selected}"
				showFail="{showFailures.selected}"/>
		</s:NavigatorContent>
		
		<s:NavigatorContent label="XML">
			<s:TextArea
				text="{manifestData}"
				width="100%" height="100%"
				editable="false"
				paddingTop="10"
				paddingBottom="10"
				paddingLeft="10"
				paddingRight="10"/>
		</s:NavigatorContent>
		
	</mx:TabNavigator>
	
</s:Application>
